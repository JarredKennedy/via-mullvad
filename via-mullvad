#!/bin/bash

viamv_usage () {
    echo "Usage:"
    echo "via-mullvad acccount_number [OPTIONS...] -- program [program_args]"
    echo
    
    echo -e "account_number"
    echo -e "\tThe Mullvad account number. This argument is required."
    echo

    echo -e "OPTIONS"
    echo -e "\t-h hostname"
    echo -e "\t\tSpecifies the hostname of the Mullvad server to connect to. If no hostname is specified, the locale command is used to determine the"
    echo -e "\t\tcountry and any wireguard server in that country may be used. The value of hostname can be a location in the format {country code}-{city}"
    echo -e "\t\twith values used by Mullvad, for example, au-syd for Sydney, Australia."

    echo -e "\t-r nameserver"
    echo -e "\t\tUses the nameserver in the argument for DNS lookups."

    echo -e "\t-f"
    echo -e "\t\tAllow the script to delete the oldest Mullvad device if the account already has the maximum number of accounts registered."

    echo "Note: double dash (--) before program is NOT optional."
    echo
    echo "EXAMPLES"
    echo -e "\tPing github.com from Germany"
    echo -e "\tvia-mullvad 123456789 -h de10-wireguard -- ping github.com"
    echo
    echo -e "\tExecute a program with networking via Singapore"
    echo -e "\tvia-mullvad 123456789 -h sg4-wireguard -- /usr/local/bin/my-program arg1 arg2"
}

arg_offset=1
while [ $arg_offset -le $# ]
do
    arg_span=1
    arg="${!arg_offset}"

    if [ $arg_offset -eq 1 ]; then
        account_number=$1
    elif [[ $arg == "-h" ]]; then
        let host_arg=$arg_offset+1
        host_name=${!host_arg}
        arg_span=2
    elif [[ $arg == "--check" ]]; then
        check_enabled=1
    elif [[ $arg == '-r' ]]; then
        let ns_arg=$arg_offset+1
        nameserver=${!ns_arg}
        arg_span=2
    elif [[ $arg == '-f' ]]; then
        allow_delete_device=1
    elif [[ $arg == "--" ]]; then
        all_args=( ${*} )
        num_program_args=(${#all_args[@]}-$arg_offset)
        program=${all_args[@]:$arg_offset:num_program_args}
        break
    elif [[ $arg == "--help" ]]; then
        viamv_usage
        exit 0
    fi

    let arg_offset=$arg_offset+$arg_span
done

if [ -z "$account_number" -o $(echo "$account_number" | grep -o -e "^[0-9]*$" | tr -d '\n' | wc -c) -ne ${#account_number} ]; then
    echo "Invalid argument: account_number"
    echo "argument is required and must be only contain digits"
    exit 1
fi

if [ -z $UID -o $UID -gt 0 ]; then
    echo "via-mullvad must be run as root"
    exit 1
fi

if ! command -v wg >/dev/null 2>&1; then
    echo "wg not found: wireguard-tools must be available"
    exit 1
fi

if ! command -v curl >/dev/null 2>&1; then
    echo "curl not found: curl must be available"
    exit 1
fi

cache_dir="$HOME"

# Establish keypair
# pub_key=$(wg genkey | tee $HOME/mullvad-private-key | wg pubkey | tee $HOME/mullvad-public-key)

# $1    endpoint
# $2    data|GET|DELETE
# $3    response variable
# $4    access token (optional)
viamv_api_request () {
    headers=(-H "Content-Type: application/json")
    headers+=(-H "Accept: application/json")

    if [ $# -eq 4 ]; then
        headers+=(-H "Authorization: Bearer $4")
    fi

    if [ -n "$2" ]; then
        if [[ "$2" == "GET" ]]; then
            data=""
        elif [[ "$2" == "DELETE" ]]; then
            data="-X DELETE"
        else
            data="-d $2"
        fi
    fi

    local response=$(curl -sS $data "${headers[@]}" https://api.mullvad.net/$1)

    declare -g $3="$response"
}

# $1    Content to search
# $2    Property for which to pluck value
# $3    Name of the variable the match(es) are assigned to
viamv_json_pluck () {
    cut_len=$((5+${#2}))
    declare -g $3="$(echo "$1" | grep -o -e "\"$2\":\\s*\"[^\"]\+" | cut -b $cut_len-)"
}

relays_url="https://api.mullvad.net/app/v1/relays"
relays_headers=$(curl -sS --head "$relays_url")

relays_etag_line=$(echo "$relays_headers" | grep -m 1 -e "^etag:")
relays_etag=$(echo "$relays_etag_line" | grep -o -e "\"[^\"]*" | tr -d '\r\n"')
relays_file="$HOME/relays-$relays_etag.json"

if [ -n "$relays_etag" -a -f $relays_file ]; then
    echo "Read relay data from file"
    relays_data=$(cat $relays_file)
else
    echo "Downloaded relay data"
    relays_data=$(curl -sS "$relays_url" | tee $relays_file)
fi

if [ -n "$host_name"  ] && echo "$host_name" | grep -q -e "-wireguard"; then
    # If the hostname was specified, and the hostname is not a location, try to find
    # the specified relay in the relay data.
    relay=$(echo "$relays_data" | awk "/\\\"wireguard\\\"/ { match(\$0, /\\\"wireguard\\\":[^\\\"]+\\\"relays\\\":/); wg=substr(\$0, RSTART+RLENGTH); match(wg, /{[^\}]*\\\"hostname\\\":\\\"$host_name\\\"[^}]*}/); relay=substr(wg, RSTART, RLENGTH); print relay }")

    if [ -z "$relay" ]; then
        echo "Could not find relay with hostname $host_name"
        exit 1
    fi
else
    # If the hostname is a location, try to find a wireguard server matching that location. If
    # the hostname was omitted, use a server matching the country specified by locale.
    # If there is no Mullvad wireguard server matching the location specified, exit with error.
    # If there is no Mullvad wireguard server matching the output of locale, use US.
    if [ -n "$host_name" ]; then
        if echo "$host_name" | grep -q -e "^[a-z]\{2\}\(-[a-z]\{3\}\)\?$"; then
            # hostname is a location in one of these formats: CC or CC-YYY
            location="$host_name"
        else
            echo "Hostname argument is not in ({country code}[-{city abbr}]) format $host_name"
            exit 1
        fi
    else
        location=$(locale | grep -e "LANGUAGE=" | grep -o -e "[a-z]\{2\}_[A-Z]\{2\}" | cut -c 4- | tr [:upper:] [:lower:])
    fi

    match_location="/\\\"wireguard\\\"/ { match(\$0, /\\\"wireguard\\\":[^\\\"]+\\\"relays\\\":/); wg=substr(\$0, RSTART+RLENGTH); match(wg, /{[^\}]*\\\"location\\\":\\\"LOCATION(-[a-z][a-z][a-z])?\\\"[^}]*}/); relay=substr(wg, RSTART, RLENGTH); print relay }"

    location_program=$(echo -n "$match_location" | sed s/LOCATION/$location/)
    relay=$(echo "$relays_data" | awk "$location_program")

    if [ -z "$relay" ]; then
        if [ -n "$host_name" ]; then
            echo "Could not find a relay matching location $host_name"
            exit 1
        else
            location_program=$(echo -n "$match_location" | sed s/LOCATION/us/)
            relay=$(echo "$relays_data" | awk "$location_program")
        fi
    fi
fi

viamv_json_pluck "$relay" "ipv4_addr_in" "endpoint"
viamv_json_pluck "$relay" "public_key" "relay_key"

viamv_api_request "auth/v1/token" "{\"account_number\":\"$account_number\"}" "token_response"
viamv_json_pluck "$token_response" "access_token" "access_token"

# Check if the access token is obviously not what is expected.
# The access token is invalid if it is fewer than 10 chars or is not case-insensitive alpha-numeric + underscore.
if [ ${#access_token} -lt 10 -o $(echo -n $access_token | grep -o -e "^[a-zA-Z0-9_]*$" | tr -d '\n' | wc -c) -ne ${#access_token} ]; then
    echo "Access token is not in the correct format."
    echo "HTTP request may have failed. Check account_number parameter is correct."
    exit 1
fi

viamv_api_request "accounts/v1/devices" "GET" "device_list" $access_token

viamv_json_pluck "$device_list" "id" "device_ids"
device_ids=( $device_ids )

for device_id in ${device_ids[@]}; do
    if [ -f "$cache_dir/$device_id.key" ]; then
        use_device=$device_id
        break
    fi
done

if [ -z "$use_device" ]; then
    private_key=$(wg genkey)
    public_key=$(echo "$private_key" | wg pubkey)

    # Establish mullvad device registered pubkey
    viamv_api_request "accounts/v1/devices" "{\"pubkey\":\"$public_key\",\"hijack_dns\":false}" "create_device_response" $access_token

    if [[ "$create_device_response" == *"MAX_DEVICES_REACHED"* ]]; then
        # The Mullvad account is at the limit of devices.
        # The oldest device will be deleted.
        if [ -n "$allow_delete_device" ]; then
            viamv_json_pluck "$device_list" "created" "device_dates"
            oldest_device_date=$(echo -n "$device_dates" | sort | sed '1q;d')
            oldest_device=$(echo -n "$device_list" | grep -o -e "{[^}]*\"created\":\"$oldest_device_date\"[^}]*}")
            viamv_json_pluck "$oldest_device" "id" "oldest_device_id"
            viamv_api_request "accounts/v1/devices/$oldest_device_id" "DELETE" "delete_device_response" $access_token
            viamv_api_request "accounts/v1/devices" "{\"pubkey\":\"$public_key\",\"hijack_dns\":false}" "create_device_response" $access_token
        else
            echo "Mullvad account is at device limit. Call via-mullvad with -f option to allow deleting the oldest device from the account"
            exit 1
        fi
    fi

    viamv_json_pluck "$create_device_response" "id" "use_device"
    echo "$private_key" > "$cache_dir/$use_device.key"

    viamv_json_pluck "$create_device_response" "ipv4_address" "ip"
else
    device=$(echo -n "$device_list" | grep -o -e "{[^}]*\"id\":\"$use_device\"[^}]*}")
    viamv_json_pluck "$device" "ipv4_address" "ip"
fi

vwg_args=("$endpoint:19415" "$cache_dir/$use_device.key" "$relay_key")
vwg_args+=(-i "$ip")

if [ -n "$nameserver" ]; then
    vwg_args+=(-r "$nameserver")
fi

vwg_args+=(-- "$program")

/bin/bash ./via-wireguard ${vwg_args[@]}